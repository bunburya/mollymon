#!/usr/bin/env python3
import logging
import os
from argparse import ArgumentParser, Namespace
from datetime import datetime

from platformdirs import user_runtime_dir, user_log_dir, user_data_dir

from mollymon.contact import DAO, serve_scgi, test_contact, print_messages, print_message_count
from mollymon.report import print_report

PKG_NAME = 'mollymon'

RUN_DIR = user_runtime_dir(PKG_NAME)
LOG_DIR = user_log_dir(PKG_NAME)
DATA_DIR = user_data_dir(PKG_NAME)

# "Top-level" functions, ie, those that are invoked directly by the argument parser

def run_scgi(args: Namespace):
    dao = DAO(os.path.join(args.data_dir, f'{PKG_NAME}.db'))
    return serve_scgi(dao, os.path.join(args.run_dir, 'contact.sock'))


def run_test(args: Namespace):
    test_contact()
    print('Tests passed.')


def run_print_msgs(args: Namespace):
    dao = DAO(args.db_file)
    return print_messages(dao, unread_only=args.unread, mark_read=args.mark_read)


def run_count_msgs(args: Namespace):
    dao = DAO(args.db_file)
    return print_message_count(dao, unread_only=args.unread)


def report(args: Namespace):
    if args.since:
        since = datetime.strptime(args.since, '%Y%m%d')
    else:
        since = None
    if args.until:
        until = datetime.strptime(args.until, '%Y%m%d')
    else:
        until = None
    if os.path.exists(args.db_file):
        db_file = args.db_file
    else:
        db_file = None
    print_report(
        args.access_log,
        args.error_log,
        args.capsule_name,
        db_file,
        since,
        until
    )


parser = ArgumentParser(description='Utility to monitor Gemini server traffic and activity.')
parser.add_argument('--debug', '-d', action='store_true', help='Debug mode (verbose logging).')
parser.add_argument('--log-file', help='File to log to.')
parser.add_argument('--run-dir', metavar='RUN_DIR', default=RUN_DIR,
                    help='Directory for storing runtime data, eg, socket files.')
parser.add_argument('--data-dir', metavar='DATA_DIR', default=DATA_DIR, help='Directory for storing application data.')

subparsers = parser.add_subparsers()

report_parser = subparsers.add_parser('report', help='Generate a report of server activity.')
report_parser.add_argument('access_log', metavar='ACCESS_LOG', help='Path to access log file.')
report_parser.add_argument('error_log', metavar='ERROR_LOG', help='Path to error log file.')
report_parser.add_argument('capsule_name', metavar='CAPSULE_NAME', help='Name of capsule.')
report_parser.add_argument('--since', metavar='SINCE_DATE',
                           help='Only print messages received on or after this date (YYYYMMDD format).')
report_parser.add_argument('--until', metavar='UNTIL_DATE',
                           help='Only print messages received on or before this date (YYYYMMDD format).')
report_parser.set_defaults(func=report)

contact_parser = subparsers.add_parser(
    'contact',
    help='SCGI application that allows visitors to Gemini server to leave a message.'
)

contact_subparsers = contact_parser.add_subparsers()
run_parser = contact_subparsers.add_parser('run', help='Launch contact SCGI application.')
run_parser.set_defaults(func=run_scgi)
print_parser = contact_subparsers.add_parser('print', help='Print messages.')
print_parser.add_argument('--unread', action='store_true', help='Print unread messages only.')
print_parser.add_argument('--mark-read', action='store_true', help='Mark messages as read once printed.')
print_parser.set_defaults(func=run_print_msgs)
count_parser = contact_subparsers.add_parser('count', help='Print count of unread messages.')
count_parser.add_argument('--unread', action='store_true', help='Print count of unread messages only.')
count_parser.set_defaults(func=run_count_msgs)
test_parser = contact_subparsers.add_parser('test', help='Run some basic tests to verify functionality.')
test_parser.set_defaults(func=run_test)


def main(args: Namespace):
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    if args.log_file:
        logging.basicConfig(filename=args.log_file)
    if 'func' in args:
        return args.func(args)
    else:
        return parser.print_help()


if __name__ == '__main__':
    args = parser.parse_args()
    main(args)
